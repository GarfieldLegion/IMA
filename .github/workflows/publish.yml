name: Build and publish
# TODO: return this
# on:
#   pull_request:
#     types: [closed]
#     branches:
#       - master
#       - develop
#       - beta
#       - stable
on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    # TODO: return this
    # if: github.event.pull_request.merged
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      PROXY_DIR: "proxy"
    steps:
    - uses: actions/checkout@v2

    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    # TODO: return this
    # - name: Build and publish container
    #   run: |
    #     export BRANCH=${GITHUB_REF##*/}
    #     echo "Branch $BRANCH"
    #     export VERSION=$(bash ./scripts/calculate_version.sh)
    #     echo "VERSION=$VERSION" >> $GITHUB_ENV
    #     echo "Version $VERSION"
    #     echo ------------ download binaries
    #     LIB_BLS_RELEASE_TAG=${{ secrets.LIB_BLS_RELEASE_TAG }} bash ./scripts/download_binaries.sh
    #     export RELEASE=true
    #     echo "RELEASE=$RELEASE" >> $GITHUB_ENV
    #     echo ------------ docker image
    #     bash ./scripts/build_image.sh ${{ secrets.DOCKER_USERNAME }} ${{ secrets.DOCKER_PASSWORD }} #|| echo "----> Looks like deploy failed"

    - name: Prepare for pip package building
      run: |
        python3 -m pip install --upgrade build
        python3 -m pip install --user --upgrade twine

    - name: Install project:
      working-directory: ${{env.PROXY_DIR}}
      run: yarn install

    - name: Build predeployed pip package
      working-directory: ${{env.PROXY_DIR}}
      run: |        
        ./predeployed/scripts/build_package.sh

    - name: Publish predeployed pip package
      working-directory: ${{env.PROXY_DIR}}
      run: |        
        ./predeployed/scripts/publish_package.sh

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.VERSION }}
        release_name: ${{ env.VERSION }}
        draft: false
        prerelease: true
